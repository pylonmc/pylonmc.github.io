{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Pylon?","text":"<p>Pylon is a work-in-progress Minecraft Java plugin intended as a successor to Slimefun, in active development by a group of veteran Slimefun developers, contributors, and server administrators. Join our Discord server to find out more.</p> <p>Pylon is built using an addon system. All addons require the main Pylon plugin - Pylon Core - to work. This includes Pylon Base, the addon which adds all the default content. Developers can create their own Pylon addons.</p> <p>Watch this space!</p>"},{"location":"#discord","title":"Discord","text":"<p>Click to join</p>"},{"location":"contributing/contributing-to-docs/","title":"Contributing to documentation","text":"<p>We use MkDocs and Github pages for the documentation site you're reading right now.</p>"},{"location":"contributing/contributing-to-docs/#how-to-get-started","title":"How to get started","text":"<ol> <li>Clone the <code>pylon-docs</code> repository: <code>git clone https://github.com/pylonmc/pylon-docs</code></li> <li>Install MkDocs using pip: <code>pip install mkdocs</code></li> <li>Install the MkDocs material theme: <code>pip install mkdocs-material</code></li> <li>Run the documentation website locally using <code>mkdocs serve</code></li> </ol>"},{"location":"contributing/contributing-to-docs/#deploying","title":"Deploying","text":"<p>Only core members can deploy the website.</p> <ol> <li>Clone the <code>pylonmc.github.io</code> repository: <code>git clone https://github.com/pylonmc/pylonmc.github.io</code></li> <li>Deploy the site by running in the pylonmc.github.io repository <code>mkdocs gh-deploy --config-file ../pylon-docs/mkdocs.yml --remote-branch master</code></li> </ol>"},{"location":"contributing/getting-started/","title":"Getting started","text":"<p>Pylon Core is written in Kotlin, a language similar to Java, but with more modern features and concise syntax. If you know Java, you'll be able to pick up Kotlin very quickly.</p> <p>Pylon Base is written in Java.</p>"},{"location":"contributing/getting-started/#how-to-get-started","title":"How to get started","text":"<ol> <li>Clone the <code>pylon</code> repository: <code>git clone https://github.com/pylonmc/pylon</code> (or use a GUI like Github Desktop)</li> <li>If you're using IntelliJ, it'll set everything up automatically. If not, run <code>./gradlew</code>. This will clone the <code>pylon-core</code> and <code>pylon-base</code> repositories.</li> <li>If you want to submit your changes to the Pylon project, delete the pylon-core or pylon-base directory (depending on which one you want to contribute to), fork the pylon-core or pylon-base repository, and clone your fork into the same directory. Otherwise, you won't be able to open a pull request with your changes (unless you're a Pylon developer and have access to the Pylon repositories).</li> <li>To run the tests, open the Gradle menu in IntelliJ, click 'pylon' -&gt; 'pylon' -&gt; 'Tasks' -&gt; 'run paper' -&gt; 'runLiveTests'. If you're not using IntelliJ, run <code>./gradlew runLiveTests</code>. This will start a server and run the test addon.</li> <li>To run a server with your local versions of <code>pylon-core</code> and <code>pylon-base</code>, open the Gradle menu in IntelliJ, click 'pylon' -&gt; 'pylon' -&gt; 'Tasks' -&gt; 'run paper' -&gt; 'runSnapshotServer'. If you're not using IntelliJ, run <code>./gradlew runSnapshotServer</code>. This will start a server which you can then join by connecting to <code>localhost</code> from Minecraft. The server's files will be located in the <code>run</code> directory.</li> </ol>"},{"location":"contributing/getting-started/#submitting-your-contributions","title":"Submitting your contributions","text":"<p>We generally welcome contributions for both Core and Base, but it's best check with the Pylon team before making any major changes, because we might already have something planned out that won't fit well with your changes. Hop on our Discord server and have a chat with us if you're interested in doing anything major, or have any questions about contributing :)</p> <p>Once you're done with your changes, open a pull request and give some information about what you did and why you did it.</p>"},{"location":"contributing/getting-started/#pylon-master-repository","title":"Pylon master repository","text":"<p>Pylon has a master repository that contains both <code>pylon-core</code> and <code>pylon-base</code>. This allows you to run base using your very own home-baked version of core, which allows you to test new features much more easily. This is what the 'How to get started' section used. We recommend you make changes to both base and core using the master repository, and the rest of this guide will assume you're using it.</p>"},{"location":"contributing/getting-started/#tests","title":"Tests","text":"<p>Pylon core has a set of integration tests. Tests should only be added for critical functionality such as block storage and recipes.</p>"},{"location":"contributing/getting-started/#im-stuck-what-next","title":"I'm stuck, what next?","text":"<ol> <li>If it's Pylon specific, check if it's in the docs. If it's not Pylon specific, google it.</li> <li>Search issues on the relevant repository to see if it's been mentioned</li> <li>Search relevant terms on our Discord server to see if it's been discussed before</li> <li>Ask a question on our Discord server</li> </ol>"},{"location":"creating-addons/getting-started/","title":"Getting started","text":""},{"location":"creating-addons/getting-started/#prerequisites","title":"Prerequisites","text":"<p>This guide will assume that you know the basics of Java programming, that you have a Github account, and that you're using IntelliJ. This guide also assumes no prior experience with Minecraft plugin development in the first few sections.</p>"},{"location":"creating-addons/getting-started/#im-new-to-programming","title":"I'm new to programming","text":"<p>If you're new to programming, not to worry, there are plenty of guides online you can follow, and making a Pylon addon is a great way to learn programming. Keep in mind, though, that you will face plenty of challenges along the way! Don't be afraid to look stuff up constantly, and if you're really stuck, join our Discord and somebody will probably be able to help you :)</p>"},{"location":"creating-addons/getting-started/#i-know-some-programming-have-developed-a-plugin-before","title":"I know some programming / have developed a plugin before","text":"<p>You should be able to follow along with this guide fairly easily. Pylon's API is mostly quite simple, while providing a lot of flexibility when you need it.</p> <p>For more experienced Java programmers, you might also be interested in Kotlin. This is an alternative to Java. Pylon core is written in Kotlin, since Kotlin is generally nicer to work with (especially in terms of syntax!) and has some cool features that Java is missing. However, this guide will use Java in the interest of being as beginner-friendly as possible.</p>"},{"location":"creating-addons/getting-started/#setting-up-your-project","title":"Setting up your project","text":""},{"location":"creating-addons/getting-started/#forking-the-template","title":"Forking the template","text":"<p>Pylon has an addon template you can use, which comes with everything you need to write a Pylon addon. Create a fork of the template. This will create a new repository on Github which will contain your addon code.</p> <p>TODO the rest of this</p>"},{"location":"creating-addons/getting-started/#adding-your-first-item","title":"Adding your first item","text":"<p>Our addon so far has only one class: <code>MyAddon</code> (or whatever you renamed it to). This class extends JavaPlugin and implements PylonAddon. There are some comments inside the class to explain what each part does. Our addon doesn't actually do anything yet though - so let's add a new item!</p> <p>We'll create an unbreakable diamond sword to start with.</p> <p>To create a simple item, we only need two things: a key for the item, and an item stack.</p>"},{"location":"creating-addons/getting-started/#creating-a-key","title":"Creating a key","text":"<p>We need a simple way for Pylon to identify your item - a key. This is very similar to how vanilla Minecraft items have IDs. We could use just a string as the key, but what if two addons add an item called <code>copper_dust</code>? We won't be able to tell which one is which! To fix this, Pylon uses <code>NamespacedKey</code>s, which just means we take a string and your addon's name, and put them together - for example, <code>my_addon:copper_dust</code>.</p> <p>NamespacedKeys are how Pylon identifies custom items, blocks, researches, entities, and more.</p> <p>To create a new NamespacedKey called 'epic_sword', we can do the following (inside <code>onEnable</code>): <pre><code>NamespacedKey epicSwordKey = new NamespacedKey(this, \"epic_sword\");\n</code></pre></p>"},{"location":"creating-addons/getting-started/#itemstack","title":"ItemStack","text":"<p>The second thing we need is an actual item.</p> <p>Whenever you're creating a Pylon item, use <code>ItemStackBuilder.pylonItem(&lt;material&gt;, &lt;key&gt;)</code>.</p> Why use `ItemStackBuilder.pylonItem`?      There are others ways to create ItemStacks, but **do not** use these to create Pylon items. Under the hood, Pylon stores item keys in PersistentDataContainers, or PDCs (covered later in the tutorial). When you call ItemStackBuilder.pylonItem and supply a key, that key is written to the item's PersistentDataContainer automatically. If you supply your own item stack, its PDC won't contain the item's key, and Pylon won't be able to differentiate that item with a regular Minecraft item.      `ItemStackBuilder` also sets the name and lore of the item to the default translation keys (which will be explained later in this tutorial).  <p><code>ItemStackBuilder</code> contains several different methods to help you create <code>ItemStack</code>s. For example, you can use <code>.set(&lt;component&gt;, &lt;value&gt;)</code> to set some of the item's values, like enchantments, whether the item is unbreakable, and so on.</p> <p>To create an unbreakable diamond sword, you can do as follows: <pre><code>ItemStack epicSword = ItemStackBuilder.pylonItem(Material.DIAMOND_SWORD, epicSwordKey)\n        .set(DataComponentTypes.UNBREAKABLE, Unbreakable.unbreakable())\n        .build();\n</code></pre></p>"},{"location":"creating-addons/getting-started/#registering-your-item","title":"Registering your item","text":"<p>Finally, we need to register our item with Pylon: <pre><code>PylonItem.register(PylonItem.class, epicSword);\n</code></pre></p>"},{"location":"creating-addons/getting-started/#putting-it-all-together","title":"Putting it all together","text":"<p>Here's the complete code: <pre><code>    // Called when our plugin is enabled\n    @Override\n    public void onEnable() {\n        instance = this;\n\n        // Every Pylon addon must call this BEFORE doing anything Pylon-related\n        registerWithPylon();\n\n        NamespacedKey epicSwordKey = new NamespacedKey(this, \"epic_sword\");\n        ItemStack epicSword = ItemStackBuilder.pylonItem(Material.DIAMOND_SWORD, epicSwordKey)\n                .set(DataComponentTypes.UNBREAKABLE, Unbreakable.unbreakable())\n                .build();\n        PylonItem.register(PylonItem.class, epicSword);\n\n    }\n</code></pre> Now, let's run a server with our plugin.</p>"},{"location":"creating-addons/getting-started/#running-a-test-server","title":"Running a test server","text":"<p>TODO</p>"},{"location":"creating-addons/getting-started/#setting-namelore","title":"Setting name/lore","text":"<p>Pylon has first-class translation support. Instead of setting an item's name and lore in the code, you'll need to set an item's name and lore in a translation file.</p> <p>TODO</p>"},{"location":"installation/commands-and-permissions/","title":"Commands &amp; permissions","text":""},{"location":"installation/commands-and-permissions/#default-commands","title":"Default commands","text":"Command Permission <code>/py research discover &lt;research&gt;</code> <code>pylon.command.research.discover</code> <code>/py research list</code> <code>pylon.command.research.list</code> <code>/py research points me</code> <code>pylon.command.research.points.get.self</code> <code>/py waila</code> <code>pylon.command.waila</code>"},{"location":"installation/commands-and-permissions/#admin-commands","title":"Admin commands","text":"Command Permission <code>/py debug</code> <code>pylon.command.debug</code> <code>/py give &lt;player&gt; &lt;item&gt; [amount]</code> <code>pylon.command.give</code> <code>/py research points get &lt;player&gt;</code> <code>pylon.command.research.points.get</code> <code>/py research add &lt;player&gt; &lt;research&gt;</code> <code>pylon.command.research.modify</code> <code>/py research addall &lt;player&gt;</code> <code>pylon.command.research.modify</code> <code>/py research remove &lt;player&gt; &lt;research&gt;</code> <code>pylon.command.research.modify</code> <code>/py research points add &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py research points set &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py research points subtract &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py setblock &lt;block&gt;</code> <code>pylon.command.setblock</code>"},{"location":"installation/installing-pylon/","title":"Installation","text":"<ol> <li>Make sure you are running Paper or a Paper fork. Pylon is not compatible with Spigot.</li> <li>Download Pylon Core from here</li> <li>Download Pylon Base from here</li> <li>Drop the .jar files in your plugins folder and restart your server</li> <li>Install some addons</li> <li>Enjoy!</li> </ol>"},{"location":"installation/list-of-addons/","title":"List of addons","text":"Name Author Description Download Base Pylon team Adds all the base Pylon content. Required for most addons to work GitHub"}]}