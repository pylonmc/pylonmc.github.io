{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Pylon?","text":"<p>Pylon is a work-in-progress Minecraft Java plugin intended as a successor to Slimefun, in active development by a group of veteran Slimefun developers, contributors, and server administrators. Join our Discord server to find out more.</p> <p>Pylon is built using an addon system. All addons require the main Pylon plugin - Pylon Core - to work. This includes Pylon Base, the addon which adds all the default content. Developers can create their own Pylon addons.</p> <p>Watch this space!</p>"},{"location":"#discord","title":"Discord","text":"<p>Click to join</p>"},{"location":"contributing/contributing-to-docs/","title":"Contributing to documentation","text":"<p>We use MkDocs and Github pages for the documentation site you're reading right now.</p>"},{"location":"contributing/contributing-to-docs/#how-to-get-started","title":"How to get started","text":"<ol> <li>Clone the <code>pylon-docs</code> repository: <code>git clone https://github.com/pylonmc/pylon-docs</code></li> <li>Install MkDocs using pip: <code>pip install mkdocs</code></li> <li>Install the MkDocs material theme: <code>pip install mkdocs-material</code></li> <li>Run the documentation website locally using <code>mkdocs serve</code></li> </ol>"},{"location":"contributing/contributing-to-docs/#deploying","title":"Deploying","text":"<p>Only core members can deploy the website.</p> <ol> <li>Clone the <code>pylonmc.github.io</code> repository: <code>git clone https://github.com/pylonmc/pylonmc.github.io</code></li> <li>Deploy the site by running in the pylonmc.github.io repository <code>mkdocs gh-deploy --config-file ../pylon-docs/mkdocs.yml --remote-branch master</code></li> </ol>"},{"location":"contributing/getting-started/","title":"Getting started","text":"<p>Pylon Core is written in Kotlin, a language similar to Java, but with more modern features and concise syntax. If you know Java, you'll be able to pick up Kotlin very quickly.</p> <p>Pylon Base is written in Java.</p>"},{"location":"contributing/getting-started/#how-to-get-started","title":"How to get started","text":"<ol> <li>Clone the <code>pylon</code> repository: <code>git clone https://github.com/pylonmc/pylon</code> (or use a GUI like Github Desktop)</li> <li>If you're using IntelliJ, it'll set everything up automatically. If not, run <code>./gradlew</code>. This will clone the <code>pylon-core</code> and <code>pylon-base</code> repositories.</li> <li>If you want to submit your changes to the Pylon project, delete the pylon-core or pylon-base directory (depending on which one you want to contribute to), fork the pylon-core or pylon-base repository, and clone your fork into the same directory. Otherwise, you won't be able to open a pull request with your changes (unless you're a Pylon developer and have access to the Pylon repositories).</li> <li>To run the tests, open the Gradle menu in IntelliJ, click 'pylon' -&gt; 'pylon' -&gt; 'Tasks' -&gt; 'run paper' -&gt; 'runLiveTests'. If you're not using IntelliJ, run <code>./gradlew runLiveTests</code>. This will start a server and run the test addon.</li> <li>To run a server with your local versions of <code>pylon-core</code> and <code>pylon-base</code>, open the Gradle menu in IntelliJ, click 'pylon' -&gt; 'pylon' -&gt; 'Tasks' -&gt; 'run paper' -&gt; 'runSnapshotServer'. If you're not using IntelliJ, run <code>./gradlew runSnapshotServer</code>. This will start a server which you can then join by connecting to <code>localhost</code> from Minecraft. The server's files will be located in the <code>run</code> directory.</li> </ol>"},{"location":"contributing/getting-started/#submitting-your-contributions","title":"Submitting your contributions","text":"<p>We generally welcome contributions for both Core and Base, but it's best check with the Pylon team before making any major changes, because we might already have something planned out that won't fit well with your changes. Hop on our Discord server and have a chat with us if you're interested in doing anything major, or have any questions about contributing :)</p> <p>Once you're done with your changes, open a pull request and give some information about what you did and why you did it.</p>"},{"location":"contributing/getting-started/#pylon-master-repository","title":"Pylon master repository","text":"<p>Pylon has a master repository that contains both <code>pylon-core</code> and <code>pylon-base</code>. This allows you to run base using your very own home-baked version of core, which allows you to test new features much more easily. This is what the 'How to get started' section used. We recommend you make changes to both base and core using the master repository, and the rest of this guide will assume you're using it.</p>"},{"location":"contributing/getting-started/#tests","title":"Tests","text":"<p>Pylon core has a set of integration tests. Tests should only be added for critical functionality such as block storage and recipes.</p>"},{"location":"contributing/getting-started/#im-stuck-what-next","title":"I'm stuck, what next?","text":"<ol> <li>If it's Pylon specific, check if it's in the docs. If it's not Pylon specific, google it.</li> <li>Search issues on the relevant repository to see if it's been mentioned</li> <li>Search relevant terms on our Discord server to see if it's been discussed before</li> <li>Ask a question on our Discord server</li> </ol>"},{"location":"creating-addons/tutorial-0/","title":"Getting started","text":""},{"location":"creating-addons/tutorial-0/#foreword","title":"Foreword","text":"<p>So, you want to write a Pylon addon? Good for you! We've written this comprehensive guide to try and make it as easy as possible. Don't be too intimidated by the wall of text - we'll explain all you need to know as we go along, and you can go as slow as you need to! That said, some basic technical and programming knowledge is required - if you've never used an IDE or a compiler, or never a for loop, you might have a hard time following.</p> <p>Some housekeeping before we start...</p>"},{"location":"creating-addons/tutorial-0/#prerequisites","title":"Prerequisites","text":"<p>We'll assume that </p> <ul> <li>you know the basics of Java programming</li> <li>you have a Github account</li> <li>you have some way to use git from your computer - we recommend Github Desktop.</li> <li>you've installed and set up IntelliJ and have some idea of how to use it.</li> </ul> <p>No prior plugin development knowledge is required, though it would certainly be useful!</p>"},{"location":"creating-addons/tutorial-0/#a-note-on-kotlin","title":"A note on Kotlin","text":"<p>Though you can write addons in Java just fine, more experienced Java programmers might be interested in Kotlin. This is an alternative to Java which is much nicer to work with (especially in terms of syntax!) and has some cool features that Java is missing. Pylon Core is written in Kotlin.</p> <p>Now let's get into it!</p>"},{"location":"creating-addons/tutorial-0/#setting-up","title":"Setting up","text":""},{"location":"creating-addons/tutorial-0/#forking-the-template","title":"Forking the template","text":"<p>Pylon has an addon template you can use, which comes with everything you need to write a Pylon addon. Create a fork of the template. Then, clone your fork.</p> <p>Next, open your fork in Intellij. </p> <p>It might take a few minutes for Intellij to import the project.</p> <p></p>"},{"location":"creating-addons/tutorial-0/#whats-in-the-template","title":"What's in the template?","text":"<p>The template is as minimal as possible and contains no fluff. It's built with gradle. There are two files in the root of the directory - <code>gradlew</code> and <code>gradlew.bat</code> which are wrappers around gradle. If you're using Intellij, you won't need to worry about them. There's also <code>build.gradle.kts</code>, which you'll only need to worry about if you want to add dependencies or want to change the way the project is built.</p> <p>What you do need to worry about is <code>build.gradle.kts</code> and <code>gradle.properties</code> These two files contain the top-level information about your project - name, version, Pylon core version, main class, and group. Make sure you change these accordingly. If you're confused about the 'main class' and 'group', this might help.</p> <p>Finally, we've got <code>AddonTemplate.java</code>. This is the important bit! Open it up, and we'll continue from there in the next tutorial.</p>"},{"location":"creating-addons/tutorial-1/adding-an-item/","title":"Adding an item","text":""},{"location":"creating-addons/tutorial-1/adding-an-item/#overview","title":"Overview","text":"<p>Our addon so far has only one class: <code>AddonTemplate</code> (or whatever you renamed it to). This class extends JavaPlugin and implements PylonAddon. There are some comments inside the class to explain what each part does - have a read through and try to understand how it works. Our addon doesn't actually do anything yet though - so let's add a new item!</p> <p>Let's create an unbreakable diamond sword to start with.</p> <p>To create a simple item, we only need two things: a key for the item, and an item stack.</p>"},{"location":"creating-addons/tutorial-1/adding-an-item/#adding-the-item","title":"Adding the item","text":""},{"location":"creating-addons/tutorial-1/adding-an-item/#creating-a-key","title":"Creating a key","text":"<p>NamespacedKeys are how Pylon identifies custom items, blocks, researches, entities, and more.</p> What are NamespaceKeys and why are we using them?     A key is just a simple piece of text, like `pylonbase:copper_dust`, which allows Pylon to uniquely identify your item. This is very similar to how vanilla Minecraft items have IDs. Why don't we just use `copper_dust` as the key? Well, what if two addons add an item called `copper_dust`? We won't be able to tell which one is which! To fix this, Pylon uses `NamespacedKey`s, which just means we take a string *and* your addon's name, and put them together - for example, `my_addon:copper_dust`.  <p>To create a new NamespacedKey called 'epic_sword', we can do the following (inside <code>onEnable</code>): <pre><code>NamespacedKey epicSwordKey = new NamespacedKey(this, \"epic_sword\");\n</code></pre></p>"},{"location":"creating-addons/tutorial-1/adding-an-item/#creating-the-item-stack","title":"Creating the item stack","text":"<p>The second thing we need is an actual item. We'll use <code>ItemStackBuilder</code> for this.</p> <p><code>ItemStackBuilder</code> contains several different methods to help you create <code>ItemStack</code>s. For example, you can use <code>.set(&lt;component&gt;, &lt;value&gt;)</code> to set some of the item's values, like enchantments, whether the item is unbreakable, and so on.</p> <p>Whenever you're creating a Pylon item, make sure you use <code>ItemStackBuilder.pylonItem(&lt;material&gt;, &lt;key&gt;)</code>.</p> Why use `ItemStackBuilder.pylonItem`, and not any of the other ways to create an ItemStack?      There are others ways to create ItemStacks, but **do not** use these to create Pylon items. Under the hood, Pylon stores item keys in PersistentDataContainers, or PDCs (we'll cover them later in the tutorial - if you don't know what a PDC is, for now just imagine it as a simple way to store data inside an in-game item). When you call ItemStackBuilder.pylonItem and supply a key, that key is written to the item's PersistentDataContainer automatically. If you supply your own item stack, its PDC won't contain the item's key, and Pylon won't be able to differentiate that item with a regular Minecraft item.      `ItemStackBuilder` also sets the name and lore of the item to the default translation keys (which will be explained later in this tutorial).  <p>To create an unbreakable diamond sword, you can do as follows: <pre><code>ItemStack epicSword = ItemStackBuilder.pylonItem(Material.DIAMOND_SWORD, epicSwordKey)\n        .set(DataComponentTypes.UNBREAKABLE, Unbreakable.unbreakable())\n        .build();\n</code></pre></p>"},{"location":"creating-addons/tutorial-1/adding-an-item/#registering-the-item","title":"Registering the item","text":"<p>Finally, we need to register our item with Pylon. This means we need to pass two things: the item stack, and the class that should be used to represent the item. We'll cover how to make your own item classes later, but for now, you can use the default <code>PylonItem</code> class: (TODO link item classes page) <pre><code>PylonItem.register(PylonItem.class, epicSword);\n</code></pre></p>"},{"location":"creating-addons/tutorial-1/adding-an-item/#putting-it-all-together","title":"Putting it all together","text":"<p>Here's the complete code: <pre><code>    // Called when our plugin is enabled\n    @Override\n    public void onEnable() {\n        instance = this;\n\n        // Every Pylon addon must call this BEFORE doing anything Pylon-related\n        registerWithPylon();\n\n        NamespacedKey epicSwordKey = new NamespacedKey(this, \"epic_sword\");\n        ItemStack epicSword = ItemStackBuilder.pylonItem(Material.DIAMOND_SWORD, epicSwordKey)\n                .set(DataComponentTypes.UNBREAKABLE, Unbreakable.unbreakable())\n                .build();\n        PylonItem.register(PylonItem.class, epicSword);\n    }\n</code></pre> Now let's test it out!</p>"},{"location":"creating-addons/tutorial-1/adding-name-and-lore/","title":"Using the language system","text":""},{"location":"creating-addons/tutorial-1/adding-name-and-lore/#what-is-the-language-system","title":"What is the language system?","text":"<p>'Language system' might sound intimidating if you've never used one before, but it's very straightforward. A language system is just a way to make things translateable.</p> <p>For example, let's suppose I want to create a wonderful new item designed to thrill server admins the world over: the 'Nuclear Bomb'. I write the item code, and then, in my code, I set the item's name to be 'Nuclear Bomb'. <pre><code>...\n// (some code to create the item)\n...\nitem.setName(\"Nuclear Bomb\")\n...\n</code></pre> (not real code - just for demonstration purposes)</p> <p>Now, suppose we want Spanish speakers to be able to play our addon. Well, in Spanish, that's called 'Bomba Nuclear'. But I've hardcoded in 'Nuclear Bomb'... so how can we make sure that Spanish people see 'Bomba Nuclear' instead?</p> <p>The solution to this is to just use a generic 'translation key'. <pre><code>...\n// (some code to create the item)\n...\nitem.setName(\"item.nuclear-bomb.name\")\n...\n</code></pre> (not real code - just for demonstration purposes)</p> <p>Now, we can create a different file for each language, containing all the translation keys for that language! en.yml<pre><code>item.nuclear-bomb.name: \"Nuclear Bomb\"\n</code></pre> (not real code - just for demonstration purposes)</p> <p>es.yml<pre><code>item.nuclear-bomb.name: \"Bomba Nuclear\"\n</code></pre> (not real code - just for demonstration purposes)</p> <p>Obviously, we'll need some system to substitute in the right translation for the right people, but Pylon will handle that for you, so don't worry about it for now. Now, let's see how to do the same thing with Pylon.</p>"},{"location":"creating-addons/tutorial-1/adding-name-and-lore/#adding-name-and-lore-to-our-epic-sword","title":"Adding name and lore to our epic sword","text":"<p>Remember how we did <code>item.setName(\"item.nuclear-bomb.name\")</code> above? In Pylon, you don't need to do that because Pylon automatically generates the translation key based on your item's key. All we need to do is create translation files and make sure they contain the correct keys.</p> <p>Create a 'resources' folder under 'main', and then a 'lang' folder under that, and finally an 'en.yml' file (for English). </p> <p></p> Adding translations for other languages     If we wanted to create a Spanish language file, we would call it 'es.yml' - or 'cs.yml' for Czech, and so on. See this Wikipedia page for a full list of these 2-letter codes. <p>Next, add this inside the file: en.yml<pre><code>addon: \"&lt;your addon name here&gt;\"\n\nitem:\n  epic_sword:\n    name: \"Epic Sword\"\n    lore: |-\n      &lt;arrow&gt; This is an &lt;red&gt;epic&lt;/red&gt; sword\n      &lt;arrow&gt; Very epic\n</code></pre></p> <p>Note that we have an <code>addon</code> key. This is just the name of your addon.</p> <p>We've also added <code>name</code> and <code>lore</code> for our sword. Notice that we're using <code>epic_sword</code> here because that's the key that we created earlier: <pre><code>NamespacedKey epicSwordKey = new NamespacedKey(this, \"epic_sword\");\n</code></pre></p> What's all this &lt;arrow&gt; and &lt;red&gt; and &lt;/red&gt; business?&lt;summary&gt;     We'll go into this more later, but Pylon uses MiniMessage formatting. Pylon also has its own custom tags - &lt;arrow&gt; is an example of this. (TODO add links to language page)  <p>Start up the server again. Your sword should now have name and lore! </p>"},{"location":"creating-addons/tutorial-1/running-your-addon/","title":"Running your addon","text":""},{"location":"creating-addons/tutorial-1/running-your-addon/#starting-a-test-server","title":"Starting a test server","text":"<p>The addon template comes with a 'run server' task which you can use to run a test server right in IntelliJ. Just open the Gradle menu and find and double click the <code>runServer</code> button. This will start a new server, creating a <code>run</code> folder in your project root which will contain the server. You can modify this server however you want - add plugins, change configs, whatever!</p> <p></p> <p>You should see a console pop up with the server output. It'll take a minute or two to download the server executable. It'll fail to start on first run because you'll need to accept the EULA. Go into the <code>run</code> folder that was just created and accept the EULA in <code>eula.txt</code>, then run the <code>runServer</code> task again.</p> <p>To shut down your server, type <code>stop</code> in the console or use <code>/stop</code> ingame. Do not stop the task using the stop button in IntelliJ, because this will not shut down the server.</p> <p>Once the server has started, you can connect on <code>localhost:25565</code>. Make sure you give yourself admin permissions by typing <code>op &lt;username&gt;</code> in the console.</p>"},{"location":"creating-addons/tutorial-1/running-your-addon/#getting-the-item","title":"Getting the item","text":"<p>Now, you can give yourself your item. You can do this using <code>/py give</code>. For example, <code>/py give Idra addon-template:epic_sword</code>. If you've done everything right, you should receive your new sword item. If you try to hit an entity with the sword, you'll notice that it doesn't take damage. The sword is unbreakable!</p> <p>But wait...</p> <p>What's going on here?</p> <p></p> <p>Notice that when we created our sword, we didn't give it a name! To do that, we're going to need to use the language system. Don't worry, it's very straightforward - we'll cover it in the next section.</p>"},{"location":"creating-addons/tutorial-1/wrapping-up/","title":"Wrapping up","text":""},{"location":"creating-addons/tutorial-1/wrapping-up/#the-full-code","title":"The full code","text":"<p>There's been a lot to go through, but when you look at the code we needed, it's actually really not too much:</p> YourAddonName.java<pre><code>NamespacedKey epicSwordKey = new NamespacedKey(this, \"epic_sword\");\nItemStack epicSword = ItemStackBuilder.pylonItem(Material.DIAMOND_SWORD, epicSwordKey)\n        .set(DataComponentTypes.UNBREAKABLE, Unbreakable.unbreakable())\n        .build();\nPylonItem.register(PylonItem.class, epicSword);\n</code></pre> en.yml<pre><code>addon: \"&lt;your addon name here&gt;\"\n\nitem:\n  epic_sword:\n    name: \"Epic Sword\"\n    lore: |-\n      &lt;arrow&gt; This is an &lt;red&gt;epic&lt;/red&gt; sword\n      &lt;arrow&gt; Very epic\n</code></pre>"},{"location":"creating-addons/tutorial-1/wrapping-up/#practice-tasks","title":"Practice tasks","text":"<ul> <li>Add another item with the same key. What happens?</li> <li>Allow your sword to have a stack size greater than 1. Hint: Use <code>DataComponentTypes.MAX_STACK_SIZE</code></li> <li>Add an epic pickaxe with a different name and lore</li> <li>Add a bow that has only 10 durability, and starts with only 5 left. Hint: <code>DataComponentTypes.DAMAGE</code> and <code>DataComonentTypes.MAX_DAMAGE</code> probably don't do what you'd think they do from the name...</li> </ul>"},{"location":"creating-addons/tutorial-1/wrapping-up/#what-next","title":"What next?","text":"<p>This is only the beginning! We've got a lot more to cover, and we'll be able to go faster now that you know the basics.</p> <p>In the next section, we'll create a custom item class so we can give our item unique behaviours.</p>"},{"location":"installation/commands-and-permissions/","title":"Commands &amp; permissions","text":""},{"location":"installation/commands-and-permissions/#default-commands","title":"Default commands","text":"Command Permission <code>/py</code> <code>pylon.command.guide</code> <code>/py guide</code> <code>pylon.command.guide</code> <code>/py research discover &lt;research&gt;</code> <code>pylon.command.research.discover</code> <code>/py research list</code> <code>pylon.command.research.list</code> <code>/py research points me</code> <code>pylon.command.research.points.get.self</code> <code>/py waila</code> <code>pylon.command.waila</code>"},{"location":"installation/commands-and-permissions/#admin-commands","title":"Admin commands","text":"Command Permission <code>/py debug</code> <code>pylon.command.debug</code> <code>/py give &lt;player&gt; &lt;item&gt; [amount]</code> <code>pylon.command.give</code> <code>/py key</code> <code>pylon.command.key</code> <code>/py research points get &lt;player&gt;</code> <code>pylon.command.research.points.get</code> <code>/py research add &lt;player&gt; &lt;research&gt;</code> <code>pylon.command.research.modify</code> <code>/py research addall &lt;player&gt;</code> <code>pylon.command.research.modify</code> <code>/py research remove &lt;player&gt; &lt;research&gt;</code> <code>pylon.command.research.modify</code> <code>/py research points add &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py research points set &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py research points subtract &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py setblock &lt;block&gt;</code> <code>pylon.command.setblock</code>"},{"location":"installation/installing-pylon/","title":"Installation","text":"<ol> <li>Make sure you are running Paper or a Paper fork. Pylon is not compatible with Spigot.</li> <li>Download the latest version of Pylon Core from here</li> <li>Download the latest version of Pylon Base from here</li> <li>Drop the .jar files in your plugins folder and restart your server. Do not use /reload. The first start will take longer than usual, but after that, Pylon will load much more quickly.</li> <li>Check out Pylon Core and Pylon Base's plugin folders to see all the config options available.</li> <li>Install some addons.</li> <li>That's it!</li> </ol>"},{"location":"installation/installing-pylon/#where-is-pylon-data-stored","title":"Where is Pylon data stored?","text":"<p>You might notice that Pylon does not use a database and does not seem to have any storage files in its plugin folder. This is because Pylon stores everything inside the world file itself in the same way that Minecraft does! You don't need to worry about backing up any data besides your worlds: Pylon's data will always be consistent with the world's data. This also means that Pylon is much less succeptible to data corruption than other similar plugins.</p>"},{"location":"installation/list-of-addons/","title":"List of addons","text":"Name Author Description Download Base Pylon team Adds all the base Pylon content. Required for most addons to work GitHub"}]}