{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Pylon?","text":""},{"location":"#what-is-pylon","title":"What is Pylon?","text":"<p>Pylon is an upcoming Minecraft Java plugin that will hugely expand vanilla gameplay with new content, including electric machines, huge multiblocks, a fully-fledged fluid system, a complex smelting system, extensive automation options and much, a research system, and much more. It is intended to supersede Slimefun.</p> <p>Pylon uses an addon system, meaning anyone can add content to Pylon by writing an addon for it! It also comes with a number of really useful features, such as:</p> <ul> <li>First-class translation support, meaning each player can select their own language.</li> <li>Extensive configuration options, including per-machine configuration. </li> <li>An intuitive and user-friendly guide to help players figure out the plugin.</li> </ul>"},{"location":"#pylon-in-pictures-so-far","title":"Pylon in pictures (so far)","text":""},{"location":"#performance-stability","title":"Performance &amp; stability","text":"<p>We have built Pylon with performance and stability in mind from day 1:</p> <ul> <li>Pylon makes extensive use of caching and will run most performance-intensive systems asynchronously, as well as makeing use of modern concurrency/performance features such as coroutines. </li> <li>In addition, the plugin will have a broad range of config options to help performance - including per-machine tick rates, the ability to limit the number of machines placed by player/chunk/etc, the tick rate of fluid/energy/etc, and more. </li> <li>The way Pylon is designed minimises the chance of data corruption and has a range of error-handling mechanisms if something does go wrong.  Note: Pylon will likely not be fully compatible with bedrock.</li> </ul>"},{"location":"#provisional-timeline","title":"Provisional timeline","text":"<p>September/October 2025 - Invite-only alpha testing begins.</p> <p>Novemeber/December 2025 - Open alpha testing (likely hosted on MetaMechanists - my own server) begins. We will most likely run several seasons of Pylon that each last a few weeks, to iron out bugs, test performance, improve stability and UX, and make sure the plugin is ready to be released.</p> <p>Early/mid 2026 - Pylon is officially released</p>"},{"location":"#developing-pylon-addons","title":"Developing Pylon addons","text":"<p>We've gone to great lengths to make Pylon easy, intuitive, flexible, and most importantly, fun to develop addons for. A lot of painful lessons learnt from hundreds of hours of Slimefun addon development have guided Pylon's API, and the result is something that's intuitive and easy to work with, while being very flexible. Pylon also fully supports addons written in Kotlin, which is much nicer to write than Java.</p> <p>Currently, addon development is not supported due to how rapidly Pylon is still changing, and the lack of high-level documentation on how to do it. We plan to soon have a detailed guide on how to create an addon and how to take advantages of all the systems Pylon has to offer, so watch this space!</p>"},{"location":"#clicky-things","title":"Clicky things","text":"<p>Discord invite: https://discord.gg/4tMAnBAacW</p> <p>Github: https://github.com/pylonmc</p> <p>Documentation (heavy work in progress): https://pylonmc.github.io/</p>"},{"location":"#the-team","title":"The team","text":"<p>Currently, the core team developing Pylon is:</p> <p>@seggan  - a veteran Slimefun addon developer behind SlimefunWarfare, SFCalc, and the very successful Galactifun addon, with a very impressive contribution record for other addons, the Paper server software, and Slimefun itself. Seggan is responsible for many of the core Pylon systems, including most notably the entire translation system, WAILA, the research system, the internal registry system, and the recipe system (and has done lots more smaller features!).</p> <p>@ohmvir  - a relatively fresh but enthusiastic face from MetaMechanists who's new to plugin development, but has done a fantastic job getting up to speed and adding lots of base content, like the health talismans and beheading sword, as well as tackling various tasks that need doing here and there.</p> <p>@overlordidra (me!)  - owner of MetaMechanists (a popular Slimefun server) for over 4 years and the developer behind Quaptics. Many of the core systems - most notably the Pylon guide, the fluid system, hydraulics, the automated test code, and the core systems that keep track of custom blocks/entities/items, are my doing.</p> <p>We also have help from:</p> <p>@ihateblueb who has run a Slimefun server (Orchid) and is helping us add more content (the elevator is her doing!).</p> <p>@.ph.enix who is handling all our CI - he's set up automatic testing on our pull requests, and set up the system to publish new versions of Pylon.</p> <p>@justahuman_xd who hasn't contributed directly but has a lot of Slimefun development experience under his belt and has given a lot of useful input and guidance on the project.</p> <p>@vaan1310 who has't contributed directly, but has helped with some of the smaller stuff (namely reviewing pull requests).</p> <p>If you're interested in helping out, drop us a message on our Discord server! You don't have to be an expert to help, a little plugin development experience is enough - there are plenty of tasks to do, ranging from trivial to exceptionally complex, so just let us know if you're interested and we can find something for you to do.</p>"},{"location":"#got-questions","title":"Got questions?","text":"<p>Drop a message on our Discord server and we'll be happy to answer.</p>"},{"location":"contributing/contributing-to-docs/","title":"Contributing to documentation","text":"<p>We use MkDocs and Github pages for the documentation site you're reading right now.</p>"},{"location":"contributing/contributing-to-docs/#how-to-get-started","title":"How to get started","text":"<ol> <li>Clone the <code>pylon-docs</code> repository: <code>git clone https://github.com/pylonmc/pylon-docs</code></li> <li>Install MkDocs using pip: <code>pip install mkdocs</code></li> <li>Install the MkDocs material theme: <code>pip install mkdocs-material</code></li> <li>Run the documentation website locally using <code>mkdocs serve</code></li> </ol>"},{"location":"contributing/contributing-to-docs/#deploying","title":"Deploying","text":"<p>Only core members can deploy the website.</p> <ol> <li>Clone the <code>pylonmc.github.io</code> repository: <code>git clone https://github.com/pylonmc/pylonmc.github.io</code></li> <li>Deploy the site by running in the pylonmc.github.io repository <code>mkdocs gh-deploy --config-file ../pylon-docs/mkdocs.yml --remote-branch master</code></li> </ol>"},{"location":"contributing/getting-started/","title":"Getting started","text":"<p>Pylon Core is written in Kotlin, a language similar to Java, but with more modern features and concise syntax. If you know Java, you'll be able to pick up Kotlin very quickly.</p> <p>Pylon Base is written in Java.</p>"},{"location":"contributing/getting-started/#how-to-get-started","title":"How to get started","text":"<ol> <li>Clone the <code>pylon</code> repository: <code>git clone https://github.com/pylonmc/pylon</code> (or use a GUI like Github Desktop)</li> <li>If you're using IntelliJ, it'll set everything up automatically. If not, run <code>./gradlew</code>. This will clone the <code>pylon-core</code> and <code>pylon-base</code> repositories.</li> <li>If you want to submit your changes to the Pylon project, delete the pylon-core or pylon-base directory (depending on which one you want to contribute to), fork the pylon-core or pylon-base repository, and clone your fork into the same directory. Otherwise, you won't be able to open a pull request with your changes (unless you're a Pylon developer and have access to the Pylon repositories).</li> <li>To run the tests, open the Gradle menu in IntelliJ, click 'pylon' -&gt; 'pylon' -&gt; 'Tasks' -&gt; 'run paper' -&gt; 'runLiveTests'. If you're not using IntelliJ, run <code>./gradlew runLiveTests</code>. This will start a server and run the test addon.</li> <li>To run a server with your local versions of <code>pylon-core</code> and <code>pylon-base</code>, open the Gradle menu in IntelliJ, click 'pylon' -&gt; 'pylon' -&gt; 'Tasks' -&gt; 'run paper' -&gt; 'runSnapshotServer'. If you're not using IntelliJ, run <code>./gradlew runSnapshotServer</code>. This will start a server which you can then join by connecting to <code>localhost</code> from Minecraft. The server's files will be located in the <code>run</code> directory.</li> </ol>"},{"location":"contributing/getting-started/#submitting-your-contributions","title":"Submitting your contributions","text":"<p>We generally welcome contributions for both Core and Base, but it's best check with the Pylon team before making any major changes, because we might already have something planned out that won't fit well with your changes. Hop on our Discord server and have a chat with us if you're interested in doing anything major, or have any questions about contributing :)</p> <p>Once you're done with your changes, open a pull request and give some information about what you did and why you did it.</p>"},{"location":"contributing/getting-started/#pylon-master-repository","title":"Pylon master repository","text":"<p>Pylon has a master repository that contains both <code>pylon-core</code> and <code>pylon-base</code>. This allows you to run base using your very own home-baked version of core, which allows you to test new features much more easily. This is what the 'How to get started' section used. We recommend you make changes to both base and core using the master repository, and the rest of this guide will assume you're using it.</p>"},{"location":"contributing/getting-started/#tests","title":"Tests","text":"<p>Pylon core has a set of integration tests. Tests should only be added for critical functionality such as block storage and recipes.</p>"},{"location":"contributing/getting-started/#im-stuck-what-next","title":"I'm stuck, what next?","text":"<ol> <li>If it's Pylon specific, check if it's in the docs. If it's not Pylon specific, google it.</li> <li>Search issues on the relevant repository to see if it's been mentioned</li> <li>Search relevant terms on our Discord server to see if it's been discussed before</li> <li>Ask a question on our Discord server</li> </ol>"},{"location":"creating-addons/getting-started/","title":"Getting started","text":"<p>Danger</p> <p>Pylon addon development is not supported currently. Pylon is changing rapidly, and your addon may break in horrific ways when the next Pylon version is released. You can still make addons, but beware that you may have to make substantial changes to keep them up to date.</p>"},{"location":"creating-addons/getting-started/#foreword","title":"Foreword","text":"<p>So, you want to write a Pylon addon? Good for you! We've written this comprehensive guide to try and make it as easy as possible. Don't be too intimidated by the wall of text - we'll explain all you need to know as we go along, and you can go as slow as you need to! That said, some basic technical and programming knowledge is required - if you've never used an IDE or a compiler, or never a for loop, you might have a hard time following.</p> <p>Some housekeeping before we start...</p>"},{"location":"creating-addons/getting-started/#prerequisites","title":"Prerequisites","text":"<p>We'll assume that </p> <ul> <li>you know the basics of Java programming</li> <li>you have a Github account</li> <li>you have some way to use git from your computer - we recommend Github Desktop.</li> <li>you've installed and set up IntelliJ and have some idea of how to use it.</li> </ul> <p>No prior plugin development knowledge is required, though it would certainly be useful!</p>"},{"location":"creating-addons/getting-started/#a-note-on-kotlin","title":"A note on Kotlin","text":"<p>Though you can write addons in Java just fine, more experienced Java programmers might be interested in Kotlin. This is an alternative to Java which is much nicer to work with (especially in terms of syntax!) and has some cool features that Java is missing. Pylon Core is written in Kotlin.</p> <p>Now let's get into it!</p>"},{"location":"creating-addons/getting-started/#setting-up","title":"Setting up","text":""},{"location":"creating-addons/getting-started/#forking-the-template","title":"Forking the template","text":"<p>Pylon has an addon template you can use, which comes with everything you need to write a Pylon addon. Create a fork of the template. Then, clone your fork.</p> <p>Next, open your fork in Intellij. </p> <p>It might take a few minutes for Intellij to import the project.</p> <p></p>"},{"location":"creating-addons/getting-started/#whats-in-the-template","title":"What's in the template?","text":"<p>The template is as minimal as possible and contains no fluff. It's built with gradle. There are two files in the root of the directory - <code>gradlew</code> and <code>gradlew.bat</code> which are wrappers around gradle. If you're using Intellij, you won't need to worry about them. There's also <code>build.gradle.kts</code>, which you'll only need to worry about if you want to add dependencies or want to change the way the project is built.</p> <p>What you do need to worry about is <code>build.gradle.kts</code> and <code>gradle.properties</code> These two files contain the top-level information about your project - name, version, Pylon core version, main class, and group. Make sure you change these accordingly. If you're confused about the 'main class' and 'group', this might help.</p> <p>Finally, we've got <code>AddonTemplate.java</code>. This is the important bit! Open it up, and we'll continue from there in the next tutorial.</p>"},{"location":"creating-addons/item_ux/","title":"Item ux","text":"<ul> <li>Use a material that represents the item</li> <li>Description, then usage, then attributes</li> <li>Keep lore concise; people hate reading</li> <li>Describe what your item does, but not in so much detail that it's overbearing</li> <li>Come back to item lore and adjust it over time if you happen to think of an improvement</li> <li>Don't use colors excessively (avoid unecessary highlighting)</li> <li>Recipes should make logical sense</li> <li>Reflect recipes that can be reflected (eg: axes)</li> <li>The smelting time for a new furnace / blast furnace / smoker recipe should be the same as the smelting time for all items in vanilla, unless there's a good reason to make it different</li> <li>The material of a block should be the same as the material of the item</li> <li>Don't include lore just for the sake of writing something</li> <li>Ideally, it should be possible to figure out how to use the items from just the lore</li> <li>Don't use full stops at the end of lines</li> </ul>"},{"location":"creating-addons/your-first-item/adding-an-item/","title":"Adding an item","text":""},{"location":"creating-addons/your-first-item/adding-an-item/#overview","title":"Overview","text":"<p>Our addon so far has only one class: <code>AddonTemplate</code> (or whatever you renamed it to). This class extends JavaPlugin and implements PylonAddon. There are some comments inside the class to explain what each part does - have a read through and try to understand how it works. Our addon doesn't actually do anything yet though - so let's add a new item!</p> <p>Let's create a baguette, which fills 7 hunger bars, to start with.</p> <p>To create a simple item, we only need two things: a key for the item, and an item stack.</p>"},{"location":"creating-addons/your-first-item/adding-an-item/#adding-the-item","title":"Adding the item","text":""},{"location":"creating-addons/your-first-item/adding-an-item/#creating-a-key","title":"Creating a key","text":"<p>NamespacedKeys are how Pylon identifies custom items, blocks, researches, entities, and more.</p> What are NamespaceKeys and why are we using them? <p>A key is just a simple piece of text, like <code>pylonbase:copper_dust</code>, which allows Pylon to uniquely identify your item. This is very similar to how vanilla Minecraft items have IDs. Why don't we just use <code>copper_dust</code> as the key? Well, what if two addons add an item called <code>copper_dust</code>? We won't be able to tell which one is which! To fix this, Pylon uses <code>NamespacedKey</code>s, which just means we take a string and your addon's name, and put them together - for example, <code>my_addon:copper_dust</code>.</p> <p>To create a new NamespacedKey called 'baguette', we can do the following (inside <code>onEnable</code>): <pre><code>NamespacedKey baguetteKey = new NamespacedKey(this, \"baguette\");\n</code></pre></p>"},{"location":"creating-addons/your-first-item/adding-an-item/#creating-the-item-stack","title":"Creating the item stack","text":"<p>The second thing we need is an actual item. We'll use <code>ItemStackBuilder</code> for this.</p> <p><code>ItemStackBuilder</code> contains several different methods to help you create <code>ItemStack</code>s. For example, you can use <code>.set(&lt;component&gt;, &lt;value&gt;)</code> to set some of the item's values, like enchantments, whether the item is unbreakable, and so on.</p> <p>Whenever you're creating a Pylon item, make sure you use <code>ItemStackBuilder.pylonItem(&lt;material&gt;, &lt;key&gt;)</code>.</p> Why use <code>ItemStackBuilder.pylonItem</code>, and not any of the other ways to create an ItemStack? <p>There are others ways to create ItemStacks, but do not use these to create Pylon items. Under the hood, Pylon stores item keys in PersistentDataContainers, or PDCs (we'll cover them later in the tutorial - if you don't know what a PDC is, for now just imagine it as a simple way to store data inside an in-game item). When you call ItemStackBuilder.pylonItem and supply a key, that key is written to the item's PersistentDataContainer automatically. If you supply your own item stack, its PDC won't contain the item's key, and Pylon won't be able to differentiate that item with a regular Minecraft item.</p> <p><code>ItemStackBuilder</code> also sets the name and lore of the item to the default translation keys (which will be explained later in this tutorial).</p> <p>To create a baguette, you can do as follows: <pre><code>ItemStack baguette = ItemStackBuilder.pylonItem(Material.BREAD, baguetteKey)\n        .set(DataComponentTypes.UNBREAKABLE, Unbreakable.unbreakable())\n        .build();\n</code></pre></p>"},{"location":"creating-addons/your-first-item/adding-an-item/#registering-the-item","title":"Registering the item","text":"<p>Next, we need to register our item with Pylon. This means we need to pass two things: the item stack, and the class that should be used to represent the item. We'll cover how to make your own item classes later, but for now, you can use the default <code>PylonItem</code> class: (TODO link item classes page) <pre><code>PylonItem.register(PylonItem.class, baguette);\n</code></pre></p>"},{"location":"creating-addons/your-first-item/adding-an-item/#adding-the-item-to-the-guide","title":"Adding the item to the guide.","text":"<p>Finally, we want to add our item to the Pylon guide. Let's add it to the 'food' section. <pre><code>BasePages.FOOD.addItem(baguetteKey);\n</code></pre></p> <p>(We'll cover creating your own sections later).</p>"},{"location":"creating-addons/your-first-item/adding-an-item/#putting-it-all-together","title":"Putting it all together","text":"<p>Here's the complete code: <pre><code>    // Called when our plugin is enabled\n    @Override\n    public void onEnable() {\n        instance = this;\n\n        // Every Pylon addon must call this BEFORE doing anything Pylon-related\n        registerWithPylon();\n\n        NamespacedKey baguetteKey = new NamespacedKey(this, \"baguette\");\n        ItemStack baguette = ItemStackBuilder.pylonItem(Material.BREAD, baguetteKey)\n                .set(DataComponentTypes.FOOD, FoodProperties.food().nutrition(6))\n                .build();\n        PylonItem.register(PylonItem.class, baguette);\n        BasePages.FOOD.addItem(baguetteKey);\n\n    }\n</code></pre> Now let's test it out!</p>"},{"location":"creating-addons/your-first-item/adding-name-and-lore/","title":"Using the language system","text":""},{"location":"creating-addons/your-first-item/adding-name-and-lore/#what-is-the-language-system","title":"What is the language system?","text":"<p>'Language system' might sound intimidating if you've never used one before, but it's very straightforward. A language system is just a way to make things translateable.</p> <p>For example, let's suppose I want to create a wonderful new item designed to thrill server admins the world over: the 'Nuclear Bomb'. I write the item code, and then, in my code, I set the item's name to be 'Nuclear Bomb'. <pre><code>...\n// (some code to create the item)\n...\nitem.setName(\"Nuclear Bomb\")\n...\n</code></pre> (not real code - just for demonstration purposes)</p> <p>Now, suppose we want Spanish speakers to be able to play our addon. Well, in Spanish, that's called 'Bomba Nuclear' according to google translate. But I've hardcoded in 'Nuclear Bomb'... so how can we make sure that Spanish people see 'Bomba Nuclear' instead?</p> <p>The solution to this is to just use a generic 'translation key'. <pre><code>...\n// (some code to create the item)\n...\nitem.setName(\"item.nuclear-bomb.name\")\n...\n</code></pre> (not real code - just for demonstration purposes)</p> <p>Now, we can create a different file for each language, containing all the translation keys for that language! en.yml<pre><code>item.nuclear-bomb.name: \"Nuclear Bomb\"\n</code></pre> (not real code - just for demonstration purposes)</p> <p>es.yml<pre><code>item.nuclear-bomb.name: \"Bomba Nuclear\"\n</code></pre> (not real code - just for demonstration purposes)</p> <p>Obviously, we'll need some system to substitute in the right translation for the right people, but Pylon will handle that for you automatically. Now, let's see how to do the same thing with Pylon.</p>"},{"location":"creating-addons/your-first-item/adding-name-and-lore/#adding-name-and-lore-to-our-baguette","title":"Adding name and lore to our baguette","text":"<p>Remember how we did <code>item.setName(\"item.nuclear-bomb.name\")</code> above? In Pylon, you don't need to do that because Pylon automatically generates the translation key based on your item's key. All we need to do is create translation files and make sure they contain the correct keys.</p> <p>Open the 'en.yml' file ('en' is a code for 'English') in the <code>src/main/resources/lang</code> folder.</p> Adding translations for other languages <p>If we wanted to create a Spanish language file, we would call it 'es.yml' - or 'cs.yml' for Czech, and so on. See this Wikipedia page for a full list of these 2-letter codes.</p> <p>Next, add this inside the file: en.yml<pre><code>addon: \"&lt;your addon name here&gt;\"\n\nitem:\n  baguette:\n    name: \"Baguette\"\n    lore: |-\n      &lt;arrow&gt; &lt;dark_red&gt;The &lt;blue&gt;best &lt;/red&gt;food\n</code></pre></p> <p>Note that we have an <code>addon</code> key. This is just the name of your addon.</p> <p>We've also added <code>name</code> and <code>lore</code> for our sword. Notice that we're using <code>baguette</code> here because that's the key that we created earlier, in this line: <pre><code>NamespacedKey baguetteKey = new NamespacedKey(this, \"baguette\");\n</code></pre></p> What's all this &lt;arrow&gt; and &lt;red&gt; and &lt;/red&gt; business? <p>We'll go into this more later, but Pylon uses MiniMessage formatting. Pylon also has its own custom tags - &lt;arrow&gt; is an example of this. (TODO add links to language page)</p> <p>Start up the server again. Your sword should now have name and lore! </p>"},{"location":"creating-addons/your-first-item/running-your-addon/","title":"Running your addon","text":""},{"location":"creating-addons/your-first-item/running-your-addon/#starting-a-test-server","title":"Starting a test server","text":"<p>The addon template comes with a 'run server' task which you can use to run a test server right in IntelliJ. Just open the Gradle menu and find and double click the <code>runServer</code> button. This will start a new server, creating a <code>run</code> folder in your project root which will contain the server. You can modify this server however you want - add plugins, change configs, whatever!</p> <p></p> <p>You should see a console pop up with the server output. It'll take a minute or two to download the server executable. It'll fail to start on first run because you'll need to accept the EULA. Go into the <code>run</code> folder that was just created and accept the EULA in <code>eula.txt</code>, then run the <code>runServer</code> task again.</p> <p>To shut down your server, type <code>stop</code> in the console or use <code>/stop</code> ingame. </p> <p>Danger</p> <p>Do not stop the task using the stop button in IntelliJ, because this will not shut down the server. You will then probably be unable to kill the server. The server will become immortal. All of reality will be consumed. N\u0334o\u0336t\u0335h\u0336i\u0334n\u0334g\u0338 \u0335a\u0336n\u0335d\u0337 \u0338n\u0337o\u0337 \u0334o\u0336n\u0338e\u0338 \u0338i\u0337s\u0335 \u0336s\u0338a\u0334f\u0334e\u0337.\u0335 Y\u0336\u030f\u0332O\u0335\u0358\u032bU\u0338\u031b\u0353 \u0338\u0340\u032aS\u0338\u034a\u035aH\u0337\u0313\u032dA\u0335\u033e\u0322L\u0337\u034b\u0318L\u0337\u033f\u033b \u0334\u033e\u035cA\u0338\u033f\u0324L\u0338\u033e\u0347L\u0337\u0315\u031f \u0338\u0308\u032bB\u0334\u030a\u0345E\u0334\u0340\u0339 \u0334\u0309\u033aD\u0338\u0343\u0330E\u0335\u0308\u032aS\u0337\u031a\u032aT\u0338\u0352\u0323R\u0334\u0343\u0339O\u0335\u0313\u0328Y\u0334\u0304\u0325E\u0336\u0302\u0359D\u0336\u0311\u0330 \u0335\u0358\u0349B\u0337\u030c\u0318Y\u0334\u033d\u0345 \u0334\u0308\u0319T\u0337\u0352\u035aH\u0337\u0342\u0324E\u0337\u0303\u0325 \u0338\u0357\u0328A\u0335\u033e\u0328L\u0334\u0312\u0326M\u0335\u0360\u0317I\u0335\u035b\u0331G\u0338\u035d\u0348H\u0337\u0340\u032bT\u0336\u030b\u0330Y\u0338\u031a\u034e \u0335\u0344\u0326J\u0338\u0311\u0323V\u0334\u030c\u032dM\u0338\u030b\u0317. </p> <p>Once the server has started, you can connect on <code>localhost:25565</code>. Make sure you give yourself admin permissions by typing <code>op &lt;username&gt;</code> in the console.</p>"},{"location":"creating-addons/your-first-item/running-your-addon/#getting-the-item","title":"Getting the item","text":"<p>Now, you can give yourself your item. You can do this using <code>/py give</code>. For example, <code>/py give Idra addon-template:baguette</code>. If you've done everything right, you should receive your new sword item. If you try to hit an entity with the sword, you'll notice that it doesn't take damage. The sword is unbreakable!</p> <p>But wait...</p> <p>What's going on here?</p> <p></p> <p>Notice that when we created our sword, we didn't give it a name! To do that, we're going to need to use the language system. Don't worry, it's very straightforward - we'll cover it in the next section.</p>"},{"location":"creating-addons/your-first-item/wrapping-up/","title":"Wrapping up","text":""},{"location":"creating-addons/your-first-item/wrapping-up/#the-full-code","title":"The full code","text":"<p>There's been a lot to go through, but when you look at the code we needed, it's actually really not too much:</p> MyAddon.java<pre><code>NamespacedKey baguetteKey = new NamespacedKey(this, \"baguette\");\nItemStack baguette = ItemStackBuilder.pylonItem(Material.BREAD, baguetteKey)\n    .set(DataComponentTypes.FOOD, FoodProperties.food().nutrition(6))\n    .build();\nPylonItem.register(PylonItem.class, baguette);\nBasePages.FOOD.addItem(baguetteKey);\n</code></pre> en.yml<pre><code>addon: \"&lt;your addon name here&gt;\"\n\naddon: My Addon\nitem:\n  baguette:\n    name: Baguette\n    lore: &lt;arrow&gt; &lt;blue&gt;The &lt;white&gt;best &lt;dark_red&gt;food\n</code></pre>"},{"location":"creating-addons/your-first-item/wrapping-up/#practice-tasks","title":"Practice tasks","text":"<ul> <li>Add another item with the same key. What happens?</li> <li>Make your baguette's max stack size 32. Hint: Use <code>DataComponentTypes.MAX_STACK_SIZE</code></li> <li>Add a croissant with a different name and lore</li> <li>Add a bow that has only 10 durability, and starts with only 5 left. Hint: <code>DataComponentTypes.DAMAGE</code> and <code>DataComonentTypes.MAX_DAMAGE</code> are somewhat misleadingly named...</li> </ul>"},{"location":"creating-addons/your-first-item/wrapping-up/#what-next","title":"What next?","text":"<p>This is only the beginning! We've got a lot more to cover, and we'll be able to go faster now that you know the basics.</p> <p>In the next section, we'll create a custom item class so we can give our item unique behaviours.</p>"},{"location":"documentation/fluids/","title":"Fluids","text":"<p>Trying to create a block that consumes or produces fluids?</p> <p>See the 'Fluid blocks' tutorial for a detailed tutorial on how to do this. This page is information-heavy and intended mainly to serve as documentation for those who want to get into the details.</p>"},{"location":"documentation/fluids/#fluid-points","title":"Fluid points","text":"<p>A fluid point is one of the red/green/gray cubes you have to click to place pipes. There are 3 types of fluid points: <code>INPUT</code> (green), <code>OUTPUT</code> (red), and <code>CONNECTOR</code> (gray). Input and output points are attached to blocks to allow fluids to be added/removed, while connected are solely for connecting other points together.</p> <p>To create a fluid connection point for your machine, you can call <code>FluidPointInteraction.make(...)</code>.</p>"},{"location":"documentation/fluids/#fluid-blocks","title":"Fluid blocks","text":""},{"location":"documentation/fluids/#pylonfluidblock","title":"PylonFluidBlock","text":"<p>PylonFluidBlock must be implemented by any block that has fluid inputs/outputs. This interface allowed you to request fluids from input points, supply fluids to output points, and specify how to add/remove fluids from your block. Confused? See the 'ticking' section for an explanation of how this works.</p> <p>See PylonFluidBlock Javadocs for usage information.</p>"},{"location":"documentation/fluids/#pylonfluidbufferblock","title":"PylonFluidBufferBlock","text":"<p>Usually, fluid machines store fluids in internal fluids. For example, the press has an internal buffer used to store plant oil, of size 1000mB by default. This is a common enough thing that we created a new interface to handle it: PylonFluidBufferBlock. This interface allows your block to easily manage fluid buffers.</p> <p>See PylonFluidBufferBlock Javadocs for usage information.</p>"},{"location":"documentation/fluids/#pylonfluidtank","title":"PylonFluidTank","text":"<p>Another common pattern is a 'fluid tank' which can only store one fluid at a time, but can store many types of fluids. PylonFluidTank implements this pattern.</p> <p>See PylonFluidTank Javadocs for usage information.</p>"},{"location":"documentation/fluids/#physical-vs-virtual-fluid-points","title":"Physical vs virtual fluid points","text":"<p>There are physical and virtual fluid points. 'Physical' fluid points (the displays and interactions used to display the boxes and allow you to interact with them) contain a 'virtual' fluid point. This distinction may seem confusing, but helps keep the underlying logic simple. </p> <p>Physical fluid points are mainly just a wrapper around virtual fluid points which provide logic for displaying them and for handling player interactions with them - they aren't too important and you'll almost never need to think about them, so when we say 'fluid point', we are referring to virtual fluid points. </p> <p>Virtual fluid points have a few properties, including the UUID of the fluid point (used to reference the point easily), the type of the fluid point, the connected fluid points, and the fluid point's block. If the fluid point is an input or output, its block must be a PylonFluidBlock.</p>"},{"location":"documentation/fluids/#segments","title":"Segments","text":"<p>Fluids are managed with the help of 'segments'. A segment is just a collection of connected fluid points. Segments encapsulate all of the connected fluids points. For example, here (with the dashes indicating pipes), A, B, and C are all in one segment, D and E are in another segment, and F is in yet another segment: <pre><code>A---B-----C  D--E    F\n</code></pre></p> <p>If we removed the pipe between B and C, then A and B would form a new segment, and C would also form a new segment. The old segment would be deleted. Conversely, if we connected C and D, then the A/B/C and D/E segments would be merged into one new segments.</p>"},{"location":"documentation/fluids/#ticking","title":"Ticking","text":"<p>Segments are important because they are the basis of how fluid ticking works. Each segment is ticked every few in-game ticks (depending on your server's config). When a fluid segment is ticked, the following happens:</p> <ol> <li>We call <code>getRequestedFluids</code> for each block in the segment and make a list of what fluids are being requested and how much of each one is being requested.</li> <li>We iterate through every fluid being supplied.</li> <li>We skip the fluid if it's not allowed by the segment.</li> <li>We skip the fluid if it's not being requested by a machine (ie, <code>fluidAmountRequested</code> returns zero for every machine).</li> <li>When/if we find a fluid that is being requested by at least one machine, we use a round-robin algorithm to take as much fluid from each machine as we can, depending on how much fluid can be passed through the pipe and how much is being requested.</li> <li>We do another round-robin pass, but this time on the machines that we're sending the fluids to, in order to distribute the fluid between them evenly.</li> </ol>"},{"location":"documentation/fluids/#fluid-flow-rates-and-allowed-fluids","title":"Fluid flow rates and allowed fluids","text":"<p>We generally want to limit how quickly pipes can transfer fluids. Properly doing this is difficult and computationally expensive, so we just 'lie' about it and instead limit the fluid flow rate per segment. We also might want to limit which fluids can pass through a pipe (for example, no hot fluids allowed in wooden pipes). This is again done on a per-segment basis.</p> <p>This is partially why you cannot connect different types of pipes together: which pipe's fluid flow rate would we use for the segment?</p> <p>When pipe segments are merged, one of the segments is chosen arbitrarily and its fluid flow rate and allowed fluids is preserved. When pipe segments are split, the fluid flow rate and allowed fluids from the old segment is preserved to the new segments.</p>"},{"location":"documentation/fluids/#pipe-placement-logic","title":"Pipe placement logic","text":"<p>Not even going to try to explain this beast. If you need to touch this code, good luck.</p>"},{"location":"installation/commands-and-permissions/","title":"Commands &amp; permissions","text":""},{"location":"installation/commands-and-permissions/#default-commands","title":"Default commands","text":"Command Permission <code>/py</code> <code>pylon.command.guide</code> <code>/py guide</code> <code>pylon.command.guide</code> <code>/py research discover &lt;research&gt;</code> <code>pylon.command.research.discover</code> <code>/py research list</code> <code>pylon.command.research.list</code> <code>/py research points me</code> <code>pylon.command.research.points.get.self</code> <code>/py waila</code> <code>pylon.command.waila</code>"},{"location":"installation/commands-and-permissions/#admin-commands","title":"Admin commands","text":"Command Permission <code>/py debug</code> <code>pylon.command.debug</code> <code>/py give &lt;player&gt; &lt;item&gt; [amount]</code> <code>pylon.command.give</code> <code>/py key</code> <code>pylon.command.key</code> <code>/py research points get &lt;player&gt;</code> <code>pylon.command.research.points.get</code> <code>/py research add &lt;player&gt; &lt;research&gt;</code> <code>pylon.command.research.modify</code> <code>/py research addall &lt;player&gt;</code> <code>pylon.command.research.modify</code> <code>/py research remove &lt;player&gt; &lt;research&gt;</code> <code>pylon.command.research.modify</code> <code>/py research points add &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py research points set &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py research points subtract &lt;player&gt; &lt;amount&gt;</code> <code>pylon.command.research.points.set</code> <code>/py setblock &lt;block&gt;</code> <code>pylon.command.setblock</code>"},{"location":"installation/installing-pylon/","title":"Installation","text":"<p>Danger</p> <p>PYLON IS CURRENTLY EXPERIMENTAL. ONLY RUN IT ON A TEST SERVER THAT YOU ARE WILLING TO DELETE. THE NEXT PYLON VERSION WILL PROBABLY NOT BE COMPATIBLE WITH THE PREVIOUS ONE. IF YOU INSTALL PYLON SOMEWHERE YOU SHOULDN'T AND END UP LOSING DATA, WE WILL POINT AND LAUGH AT YOU.</p> <ol> <li>Make sure you are running Paper or a Paper fork. Pylon is not compatible with Spigot.</li> <li>Download the latest version of Pylon Core from here</li> <li>Download the latest version of Pylon Base from here</li> <li>Drop the .jar files in your plugins folder and restart your server. Do not use /reload. The first start will take longer than usual, but after that, Pylon will load much more quickly.</li> <li>Check out Pylon Core and Pylon Base's plugin folders to see all the config options available.</li> <li>Install some addons.</li> <li>That's it!</li> </ol>"},{"location":"installation/installing-pylon/#where-is-pylon-data-stored","title":"Where is Pylon data stored?","text":"<p>You might notice that Pylon does not use a database and does not seem to have any storage files in its plugin folder. This is because Pylon stores everything inside the world file itself in the same way that Minecraft does! You don't need to worry about backing up any data besides your worlds: Pylon's data will always be consistent with the world's data. This also means that Pylon is much less succeptible to data corruption than other similar plugins.</p>"},{"location":"installation/list-of-addons/","title":"List of addons","text":"Name Author Description Download Base Pylon team Adds all the base Pylon content. Required for most addons to work GitHub"}]}